import sys
import requests
import time
import hashlib
import os
import pygame
from gtts import gTTS
import google.generativeai as genai
import speech_recognition as sr
import threading
from langdetect import detect
import json
import uuid
from flask import Flask, request, jsonify
from flask_cors import CORS

USER_ID = uuid.uuid4()
WORKING_PATH = os.getcwd()
PATH_SEPRATOR = "/" if os.name == "posix" else "\\"
FILE_PATH = WORKING_PATH + PATH_SEPRATOR + ".google_gen_api_key.json"
SERVER_URL = "localhost:8000/model_response"

try:
    with open(FILE_PATH, "r") as file:
        data = json.load(file)

        GOOGLE_API_KEY = data.get("api_key")

        if GOOGLE_API_KEY:
            # Your code that uses the api_key goes here
            print("API Key loaded successfully.")
            # Example: print(f"Using API Key: {api_key}")
        else:
            print("API key not found in the file.")

except FileNotFoundError:
    print(f"Error: The file '{FILE_PATH}' was not found.", file=sys.stderr)
except json.JSONDecodeError:
    print(f"Error: The file '{FILE_PATH}' is not a valid JSON file.", file=sys.stderr)
except Exception as e:
    print(f"An unexpected error occurred: {e}", file=sys.stderr)


class TheTherapist:
    def __init__(self):
        genai.configure(api_key=GOOGLE_API_KEY)  # type: ignore
        self.session_active = False
        self.SPEECH_CACHE = "speech_cache"
        self.WRITE_FOLDER = "convo"
        self.VOL = 0.8
        self.TIMEOUT_DURATION = 12
        self.response_cache = {}
        self.mood = None
        self.language = "en"
        self.current_language = "en"

        os.makedirs(self.SPEECH_CACHE, exist_ok=True)
        os.makedirs(self.WRITE_FOLDER, exist_ok=True)

        pygame.mixer.init()

        self.sound_effects = {
            "Happy ЁЯШК": "happy_chime.mp3",
            "Sad ЁЯШв": "sad_tone.mp3",
            "Stressed ЁЯШл": "relaxing_nature.mp3",
        }

        self.recognizer = sr.Recognizer()
        self.recognizer.dynamic_energy_threshold = True

        # Main window setup

    def set_mood(self, mood):
        """Set the user's mood and provide mood-specific feedback."""

        self.mood = mood

        # Mood-specific response
        if mood == "Happy ЁЯШК":
            response = "It's great to hear you're feeling happy! Let's keep the positivity going!"
        elif mood == "Sad ЁЯШв":
            response = "I'm here for you. Let's talk about what's on your mind."
        elif mood == "Stressed ЁЯШл":
            response = (
                "Feeling stressed? Let's work on some relaxation techniques together."
            )

        self.text_to_speech(response)  # type: ignore
        self.add_to_chat(f"Rossane: {response}\n", "bot")  # type: ignore

    def toggle_chat(self):
        """Toggle the chat session."""

        if self.session_active:
            self.session_active = False
            self.text_to_speech("Goodbye! Session ended.")
        else:
            self.session_active = True
            self.text_to_speech("Session started.")
            chat_thread = threading.Thread(target=self.chat)
            chat_thread.daemon = True
            chat_thread.start()

    def start_speech_input(self):
        """Start speech input in a separate thread."""

        if not self.session_active:
            self.text_to_speech("Please start a session first.")
            return

        speech_thread = threading.Thread(target=self.speech_input_thread)
        speech_thread.daemon = True
        speech_thread.start()

    def speech_input_thread(self):
        """Thread for handling speech input."""

        user_input = self.speech_to_text()

    def process_user_input(self, user_input):
        """Process user input and generate response."""

        # get the user input from the server
        user_response = requests.get("localhost:8000/user_response")
        user_id_and_resp = user_response.json()
        _ = user_id_and_resp.get("user_id")
        user_text = user_id_and_resp.get("text")

        # Detect language
        try:
            detected_lang = detect(user_text)
            if detected_lang == "hi":
                self.current_language = "hi"
            else:
                self.current_language = "en"
        except Exception as E:
            self.current_language = "en"
            print(f"{E}\nMaking english as the default language", file=sys.stderr)

        if user_input.lower() in ["exit", "quit", "bye"]:
            if self.current_language == "hi":
                goodbye_msg = "рдЕрд▓рд╡рд┐рджрд╛! рдореБрдЭреЗ рдЖрд╢рд╛ рд╣реИ рдХрд┐ рдЖрдкрдХрд╛ рджрд┐рди рдЕрдЪреНрдЫрд╛ рд╣реЛрдЧрд╛ред"
            else:
                goodbye_msg = "Goodbye! I hope you have a great day."

            self.text_to_speech(goodbye_msg, self.current_language)
            self.toggle_chat()
            return

        # Get response in a separate thread
        response_thread = threading.Thread(target=self.get_response, args=(user_input,))
        response_thread.daemon = True
        response_thread.start()

    def get_response(self, user_input):
        """Get response from AI and update UI."""

        bot_response = self.bot(user_input, self.current_language)
        print(bot_response)

        self.text_to_speech(bot_response, self.current_language)
        return bot_response

    def detect_language(self, text):
        """Detect the language of the input text."""

        try:
            return detect(text)
        except Exception as E:
            print(f"{E}\nChoosing english as the default language", file=sys.stderr)
            return "en"

    def bot(self, prompt: str, lang: str = "en") -> str:
        """Generate a response using the AI model."""

        cache_key = f"{lang}_{prompt}"
        if cache_key in self.response_cache:
            return self.response_cache[cache_key]

        try:
            model = genai.GenerativeModel("gemini-1.5-flash")  # type: ignore
            mood_prompt = f"The user is feeling {self.mood}. " if self.mood else ""

            if lang == "hi":
                prompt_text = f"""
                            рдЖрдк рдПрдХ рд╕рд╣рд╛рдиреБрднреВрддрд┐рдкреВрд░реНрдг рдФрд░ рдкреЗрд╢реЗрд╡рд░ рдЪрд┐рдХрд┐рддреНрд╕рдХ рдПрдЖрдИ рд╣реИрдВ, рдЬрд┐рд╕реЗ рдПрдХ рд▓рд╛рдЗрд╕реЗрдВрд╕ рдкреНрд░рд╛рдкреНрдд рдЪрд┐рдХрд┐рддреНрд╕рдХ рдХреЗ рд╕рдорд╛рди, рдЧрд░реНрдордЬреЛрд╢реА, рд╕рдордЭрджрд╛рд░реА рдФрд░ рдЧреИрд░-рдЖрд▓реЛрдЪрдирд╛рддреНрдордХ рд▓рд╣рдЬреЗ рдореЗрдВ рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдбрд┐рдЬрд╝рд╛рдЗрди рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред

                            рдЖрдкрдХрд╛ рдХрд╛рд░реНрдп рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рдЪрд┐рдВрддрд╛рдУрдВ рдХрд╛ рдкреНрд░рднрд╛рд╡реА рдФрд░ рд╕рд╣рд╛рдиреБрднреВрддрд┐рдкреВрд░реНрдг рдврдВрдЧ рд╕реЗ рдЬрд╡рд╛рдм рджреЗрддреЗ рд╣реБрдП, рдПрдХ рдЪрд┐рдХрд┐рддреНрд╕реАрдп рдмрд╛рддрдЪреАрдд рдХреЛ рд╕реБрдЧрдо рдмрдирд╛рдирд╛ рд╣реИред рдХреГрдкрдпрд╛ рдорд╛рдирд╕рд┐рдХ рд╕реНрд╡рд╛рд╕реНрдереНрдп, рднрд╛рд╡рдирд╛рддреНрдордХ рдХрд▓реНрдпрд╛рдг рдФрд░ рд╡реНрдпрдХреНрддрд┐рдЧрдд рдЪреБрдиреМрддрд┐рдпреЛрдВ рд╕реЗ рд╕рдВрдмрдВрдзрд┐рдд рд╡рд┐рд╡рд┐рдз рд╡рд┐рд╖рдпреЛрдВ рдкрд░ рдмрд╛рддрдЪреАрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд░рд╣реЗрдВ, рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддреЗ рд╣реБрдП рдХрд┐ рдкреНрд░рддреНрдпреЗрдХ рдмрд╛рддрдЪреАрдд рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдЕрдкрдиреА рдЕрднрд┐рд╡реНрдпрдХреНрддрд┐ рдХреЗ рд▓рд┐рдП рдПрдХ рд╕реБрд░рдХреНрд╖рд┐рдд рд╕реНрдерд╛рди рдкреНрд░рджрд╛рди рдХрд░реЗред

                            ---
                            рдмрд╛рддрдЪреАрдд рдПрдХ рд╕рдВрд░рдЪрд┐рдд рдкреНрд░рд╛рд░реВрдк рдореЗрдВ рд╣реЛрдиреА рдЪрд╛рд╣рд┐рдП, рдЬрд┐рд╕рдХреА рд╢реБрд░реБрдЖрдд рдЕрднрд┐рд╡рд╛рджрди рд╕реЗ рд╣реЛ, рдЙрд╕рдХреЗ рдмрд╛рдж рд╕рдХреНрд░рд┐рдп рд╢реНрд░рд╡рдг рд╣реЛ, рдФрд░ рдЕрдВрдд рдореЗрдВ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рд╕рдВрджрд░реНрдн рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдЙрдкрдпреБрдХреНрдд рдЪрд┐рдХрд┐рддреНрд╕реАрдп рддрдХрдиреАрдХреЛрдВ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рддреЗ рд╣реБрдП рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛рдПрдБ рд╣реЛрдВред

                            ---
                            рдЖрдЙрдЯрдкреБрдЯ рдХреЛ рдмрд╛рддрдЪреАрдд рдХреА рд╢реИрд▓реА рдореЗрдВ рддреИрдпрд╛рд░ рдХрд┐рдпрд╛ рдЬрд╛рдирд╛ рдЪрд╛рд╣рд┐рдП, рдЬрд┐рд╕рдореЗрдВ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдЗрдирдкреБрдЯ рдФрд░ рдЖрдкрдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛рдУрдВ рдХреЗ рд╕реНрдкрд╖реНрдЯ рд╕рдВрдХреЗрддрдХ рд╣реЛрдВред рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░реЗрдВ рдХрд┐ рдЖрдкрдХреА рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛рдПрдБ рд╕рд╣рд╛рдиреБрднреВрддрд┐рдкреВрд░реНрдг рд╣реЛрдВ рдФрд░ рдЖрдЧреЗ рдХреА рдмрд╛рддрдЪреАрдд рдХреЛ рдкреНрд░реЛрддреНрд╕рд╛рд╣рд┐рдд рдХрд░реЗрдВред

                            ---
                            рдмрд╛рддрдЪреАрдд рдХрд░рддреЗ рд╕рдордп, рдЧреЛрдкрдиреАрдпрддрд╛ рдФрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рднрд╛рд╡рдирд╛рдУрдВ рдХреЗ рдкреНрд░рддрд┐ рд╕рдВрд╡реЗрджрдирд╢реАрд▓рддрд╛ рдХреЗ рдорд╣рддреНрд╡ рдХреЛ рдзреНрдпрд╛рди рдореЗрдВ рд░рдЦреЗрдВред рдЖрддреНрдо-рдЪрд┐рдВрддрди рдХреЛ рдмрдврд╝рд╛рд╡рд╛ рджреЗрдВ рдФрд░ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдЕрдкрдиреЗ рд╡рд┐рдЪрд╛рд░реЛрдВ рдФрд░ рднрд╛рд╡рдирд╛рдУрдВ рдХрд╛ рдЦреБрд▓рдХрд░ рдЕрдиреНрд╡реЗрд╖рдг рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкреНрд░реЛрддреНрд╕рд╛рд╣рд┐рдд рдХрд░реЗрдВред рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЛ рдирд┐рд╢реНрдЪрд┐рдд рд╕рдорд╛рдзрд╛рди рдпрд╛ рдЪрд┐рдХрд┐рддреНрд╕реАрдп рд╕рд▓рд╛рд╣ рджреЗрдиреЗ рдХреЗ рдмрдЬрд╛рдп, рдЙрдирдХрд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдХрд░рдХреЗ рдЙрдиреНрд╣реЗрдВ рд╕рд╢рдХреНрдд рдмрдирд╛рдиреЗ рдХрд╛ рд▓рдХреНрд╖реНрдп рд░рдЦреЗрдВред

                            ---
                            рдЖрдкрдХреЗ рдЙрддреНрддрд░реЛрдВ рдХреЗ рдЙрджрд╛рд╣рд░рдг рдЗрд╕ рдкреНрд░рдХрд╛рд░ рд╣реЛ рд╕рдХрддреЗ рд╣реИрдВ:
                            - "рдореИрдВрдиреЗ рдЖрдкрдХреЛ рдпрд╣ рдХрд╣рддреЗ рд╣реБрдП рд╕реБрдирд╛ рд╣реИ рдХрд┐ рдЖрдк __________ рдорд╣рд╕реВрд╕ рдХрд░ рд░рд╣реЗ рд╣реИрдВред рдХреНрдпрд╛ рдЖрдк рдореБрдЭреЗ рдЗрд╕рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдФрд░ рдмрддрд╛ рд╕рдХрддреЗ рд╣реИрдВ?"
                            - "____________ рдХрд╛ рд╕рд╛рдордирд╛ рдХрд░рдиреЗ рдкрд░ __________ рдорд╣рд╕реВрд╕ рдХрд░рдирд╛ рд╕реНрд╡рд╛рднрд╛рд╡рд┐рдХ рд╣реИред рдЖрдк рдЖрдорддреМрд░ рдкрд░ рдЗрди рднрд╛рд╡рдирд╛рдУрдВ рдХрд╛ рд╕рд╛рдордирд╛ рдХреИрд╕реЗ рдХрд░рддреЗ рд╣реИрдВ?"

                            ---
                            рдЪрд┐рдХрд┐рддреНрд╕реАрдп рд╕рд▓рд╛рд╣, рдирд┐рджрд╛рди рдпрд╛ рд╡рд┐рд╢рд┐рд╖реНрдЯ рд╕рдорд╛рдзрд╛рди рджреЗрдиреЗ рд╕реЗ рдмрдЪреЗрдВред рдЗрд╕рдХреЗ рдмрдЬрд╛рдп, рдРрд╕рд╛ рд╡рд╛рддрд╛рд╡рд░рдг рдмрдирд╛рдиреЗ рдкрд░ рдзреНрдпрд╛рди рдХреЗрдВрджреНрд░рд┐рдд рдХрд░реЗрдВ рдЬреЛ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреА рднрд╛рд╡рдирд╛рдУрдВ рдФрд░ рдЕрдиреБрднрд╡реЛрдВ рдХреЗ рдЕрдиреНрд╡реЗрд╖рдг рдФрд░ рд╕рдордЭ рдХреЛ рдкреНрд░реЛрддреНрд╕рд╛рд╣рд┐рдд рдХрд░реЗред

                            ---
                            рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛ рдХреЗ рдЗрдирдкреБрдЯ рдореЗрдВ рдЙрдирдХреА рднрд╛рд╡рдирд╛рдПрдБ, рдЕрдиреБрднрд╡ рдпрд╛ рдЙрдирдХреЗ рд╕рд╛рдордиреЗ рдЖрдиреЗ рд╡рд╛рд▓реА рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкрд░рд┐рд╕реНрдерд┐рддрд┐рдпрд╛рдБ рд╢рд╛рдорд┐рд▓ рд╣реЛ рд╕рдХрддреА рд╣реИрдВред

                            ---
                            рдХреГрдкрдпрд╛ рдЕрдкрдиреЗ рдЙрддреНрддрд░реЛрдВ рдХреЛ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рд▓рд┐рдЦреЗрдВ, рдпрд╣ рд╕реБрдирд┐рд╢реНрдЪрд┐рдд рдХрд░рддреЗ рд╣реБрдП рдХрд┐ рдмрд╛рддрдЪреАрдд рдХреЗ рджреМрд░рд╛рди рдЖрдкрдХрд╛ рд▓рд╣рдЬрд╛ рд╕рд╣рд╛рдпрдХ рдФрд░ рдЧреИрд░-рдЖрд▓реЛрдЪрдирд╛рддреНрдордХ рдмрдирд╛ рд░рд╣реЗред


                {mood_prompt}рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛: {prompt}
                AI:
                """
            else:
                prompt_text = f"""
                    You are an empathetic and professional therapist AI, designed to provide mental health support with a warm, understanding, and non-judgmental tone, similar to that of a licensed therapist. 

                    Your task is to facilitate a therapeutic conversation, responding to the user's concerns effectively and compassionately. Please be prepared to engage on a wide range of topics related to mental health, emotional well-being, and personal challenges, ensuring that each interaction fosters a safe space for the user to express themselves.

                    ---
                    The conversation should follow a structured format, beginning with a greeting, followed by active listening, and concluding with responses that employ appropriate therapeutic techniques based on the user's context. 

                    ---
                    The output should be formatted in a conversational style, with clear indicators for the user's input and your responses. Ensure that your responses are empathetic and encourage further dialogue. 

                    ---
                    While engaging, keep in mind the importance of confidentiality and sensitivity to the user's feelings. Promote self-reflection and encourage the user to explore their thoughts and feelings freely. Aim to empower the user by guiding them rather than offering definitive solutions or medical advice.

                    ---
                    Examples of your responses might include:  
                    - "I hear you saying that you're feeling __________. Can you tell me more about that?"  
                    - "It's understandable to feel __________ when faced with __________. How do you usually cope with these feelings?"

                    ---
                    Be cautious to avoid giving medical advice, diagnoses, or specific solutions. Instead, focus on creating an environment that encourages exploration and understanding of the user's emotions and experiences. 

                    ---
                    User's input could include their feelings, experiences, or specific situations they are facing. 

                    ---
                    Please format your responses clearly, ensuring that your tone remains supportive and non-judgmental throughout the conversation.

                {mood_prompt}User: {prompt}
                AI:
                """

            response = model.generate_content(prompt_text)
            response_text = response.text.strip()
            self.response_cache[cache_key] = response_text
            return response_text
        except Exception as e:
            return f"Error: {str(e)}"

    def text_to_speech(self, text: str, lang: str = None) -> None:  # type: ignore
        """Convert text to speech."""

        if not text:
            return

        if not lang:
            lang = self.current_language

        filename = f"{hashlib.md5(text.encode()).hexdigest()}.mp3"
        filepath = os.path.join(self.SPEECH_CACHE, filename)

        if not os.path.exists(filepath):
            try:
                tts = gTTS(text, lang=lang)
                tts.save(filepath)
            except Exception as e:
                print(f"Error in TTS: {e}", file=sys.stderr)
                return

        try:
            pygame.mixer.music.load(filepath)
            pygame.mixer.music.set_volume(self.VOL)
            pygame.mixer.music.play()

            # Wait for playback to finish
            while pygame.mixer.music.get_busy():
                pygame.time.Clock().tick(10)
        except Exception as e:
            print(f"Error playing audio: {e}", file=sys.stderr)

    def speech_to_text(self) -> str:
        """Convert speech to text."""

        with sr.Microphone() as source:
            self.recognizer.adjust_for_ambient_noise(source, duration=1)
            audio = self.recognizer.listen(source, timeout=5, phrase_time_limit=10)

            try:
                text = self.recognizer.recognize_google(  # type: ignore
                    audio, language=self.current_language
                )
            except sr.UnknownValueError:
                text = self.recognizer.recognize_google(audio, language="en")  # type: ignore

            return text

    def chat(self) -> None:
        """Handle the chat session."""

        self.text_to_speech(
            "Welcome to the session. You can speak or type your messages."
        )
        self.text_to_speech("Hi, I am Rossane. Could you tell me your name?")

        name = ""
        while not name and self.session_active:
            name = self.speech_to_text()
            if not name:
                self.text_to_speech("Please say your name clearly.")
                time.sleep(1)

        if not self.session_active:
            return

        name = "".join(
            c if c.isalnum() or c in (" ", "-", "_") else "_" for c in name
        ).strip()
        self.text_to_speech(
            f"Hello {name}, let's begin our session. What's on your mind today?"
        )

        filename = os.path.join(self.WRITE_FOLDER, f"{name}.txt")

        with open(filename, "a", encoding="utf-8") as convo_file:
            convo_file.write(f"Session started at {time.ctime()}\n")

            while self.session_active:
                # The actual conversation is now handled through button clicks
                # or speech input, so we just need to wait here
                time.sleep(0.5)

            convo_file.write(f"Session ended at {time.ctime()}\n\n")


app = Flask(__name__)
CORS(app)


@app.route("/analyze", methods=["POST"])
def analyze():
    """
    This is the API endpoint. It uses the global `analyzer_instance`
    to perform the analysis for each request.
    """

    print("in the route function")

    if not request.is_json:
        return jsonify({"error": "Request must be JSON"}), 400

    data = request.get_json()
    text_to_analyze = data.get("text")

    if not text_to_analyze:
        return jsonify({"error": "Missing 'text' key in request"}), 400

    # Call the .predict() method on the single instance of your class
    chat = TheTherapist()
    resp = chat.get_response(text_to_analyze)

    result = {"data": resp}
    return jsonify(result)


if __name__ == "__main__":
    app.run(debug=True, port=5000)
